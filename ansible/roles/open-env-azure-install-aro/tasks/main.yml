---
- name: Login with azure root user
  command: >-
    az login -u "{{ azure_user }}"
    -p="{{ azure_user_password }}" --tenant="{{ azure_tenant }}"
- name: Create ARO VNET
  command: >-
    az network vnet create --resource-group "openenv-{{ guid }}" --name "aro-vnet-{{ guid }}" --address-prefixes 10.0.0.0/22

- name: Create ARO master subnet
  command: >-
    az network vnet subnet create --resource-group "openenv-{{ guid }}" --vnet-name "aro-vnet-{{ guid }}" --name master-subnet --address-prefixes 10.0.0.0/23 --service-endpoints Microsoft.ContainerRegistry

- name: Create ARO worker subnet
  command: >-
    az network vnet subnet create --resource-group "openenv-{{ guid }}" --vnet-name "aro-vnet-{{ guid }}" --name worker-subnet --address-prefixes 10.0.2.0/23 --service-endpoints Microsoft.ContainerRegistry

- name: Update policy for ARO master subnet
  command: >-
    az network vnet subnet update --name master-subnet --resource-group "openenv-{{ guid }}" --vnet-name "aro-vnet-{{ guid }}" --disable-private-link-service-network-policies true

- name: Create ARO cluster
  command: >-
    az aro create --resource-group "openenv-{{ guid }}" --name "aro-cluster-{{ guid }}" --vnet "aro-vnet-{{ guid }}" --master-subnet master-subnet --worker-subnet worker-subnet --client-id "{{ azaroappinfo.stdout | from_json | json_query('appId') }}" --client-secret "'{{ az_aro_pass }}'" --pull-secret "{{ ocp4_pull_secret }}"

- name: Grab the console URL for ARO
  command: >
    az aro show --resource-group "openenv-{{ guid }}" --name "aro-cluster-{{ guid }}"
    --query consoleProfile -o tsv
  register: az_aro4_public_hostname

- name: Grab the API Server URL for ARO
  command: >
    az aro show --resource-group "openenv-{{ guid }}" --name "aro-cluster-{{ guid }}"
    --query apiserverProfile.url -o tsv
  register: az_aro4_public_api

- name: Grab the domain for ARO
  command: >
    az aro show --resource-group "openenv-{{ guid }}" --name "aro-cluster-{{ guid }}"
    --query clusterProfile.domain -o tsv
  register: az_aro4_domain

- name: Grab the location for ARO
  command: >
    az aro show --resource-group "openenv-{{ guid }}" --name "aro-cluster-{{ guid }}"
    --query location -o tsv
  register: az_aro4_location

- name: Setting the replyUrls[] field on the app registration for ARO
  command: >
    az ad app update --id {{ azaroappinfo.stdout | from_json | json_query('objectId') }} --reply-urls
    {{ 'https://oauth-openshift.apps.{0}.{1}.aroapp.io/oauth2callback/RHPDS-AAD'.format(
      az_aro4_domain.stdout,
      az_aro4_location.stdout
    ) }}

- name: Grabbing the kubeadmin password for ARO4
  command: >
    az aro list-credentials --resource-group "openenv-{{ guid }}" --name "aro-cluster-{{ guid }}"
    --query kubeadminPassword -o tsv
  register: az_aro4_kubeadmin_password

- name: Wait 5 minutes for the x509 certificate to be signed before attempting to log in
  pause:
    minutes: 5

- name: Login to the resulting ARO cluster as kubeadmin
  command: >
    oc login {{ az_aro4_public_api.stdout }} -u kubeadmin -p {{ az_aro4_kubeadmin_password.stdout }}
  register: az_aro4_auth_results

- name: Create a secret to store the azureAD App ID password in the cluster
  command: >
    oc create secret generic '{{ guid }}-secret-azuread'
    --namespace openshift-config
    --from-literal=clientSecret='{{ az_aro_pass }}'

- name: Generate OAuth AAD configuration file for the cluster
  template:
    src: "./files/aad_oidc.j2"
    dest: "{{ output_dir }}/aad-oidc.yaml"
    mode: 0664

- name: Update OAuth configuration on the cluster to add AAD
  command: >
    oc apply -f {{ output_dir }}/aad-oidc.yaml
